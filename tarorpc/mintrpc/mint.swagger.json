{
  "swagger": "2.0",
  "info": {
    "title": "mintrpc/mint.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Mint"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/taro/assets": {
      "post": {
        "summary": "tarocli: `assets mint`\nMintAsset will attempts to mint the set of assets (async by default to\nensure proper batching) specified in the request.",
        "operationId": "Mint_MintAsset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mintrpcMintAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mintrpcMintAssetRequest"
            }
          }
        ],
        "tags": [
          "Mint"
        ]
      }
    },
    "/v1/taro/mint/batch/pause": {
      "post": {
        "operationId": "Mint_PauseAutoBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mintrpcPauseAutoBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mintrpcPauseAutoBatchRequest"
            }
          }
        ],
        "tags": [
          "Mint"
        ]
      }
    }
  },
  "definitions": {
    "mintrpcMintAsset": {
      "type": "object",
      "properties": {
        "asset_type": {
          "$ref": "#/definitions/tarorpcAssetType",
          "description": "The type of the asset to be created."
        },
        "name": {
          "type": "string",
          "description": "The name, or \"tag\" of the asset. This will affect the final asset ID."
        },
        "meta_data": {
          "type": "string",
          "format": "byte",
          "description": "An opaque blob that resents metadata related to the asset. This will affect\nthe final asset ID."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of units of the new asset that should be created. If the\nAssetType is Collectible, then this field cannot be set."
        },
        "group_key": {
          "type": "string",
          "format": "byte",
          "description": "The specific group key this asset should be minted with."
        }
      }
    },
    "mintrpcMintAssetRequest": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/mintrpcMintAsset",
          "description": "The asset to be minted."
        },
        "enable_emission": {
          "type": "boolean",
          "description": "If true, then the asset will be created with a key group, which allows for\nfuture asset issuance."
        },
        "skip_batch": {
          "type": "boolean",
          "description": "If true, then a batch will be created immediately. Otherwise the asset\ncreation transaction may be batched with other pending minting requests."
        }
      }
    },
    "mintrpcMintAssetResponse": {
      "type": "object",
      "properties": {
        "batch_key": {
          "type": "string",
          "format": "byte",
          "description": "A public key serialized in compressed format that can be used to uniquely\nidentify a pending minting batch. Responses that share the same key will be\nbatched into the same minting transaction."
        }
      }
    },
    "mintrpcMintingBatchResponse": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mintrpcMintAsset"
          }
        },
        "taro_root_key": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "mintrpcPauseAutoBatchRequest": {
      "type": "object"
    },
    "mintrpcPauseAutoBatchResponse": {
      "type": "object"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "tarorpcAssetType": {
      "type": "string",
      "enum": [
        "NORMAL",
        "COLLECTIBLE"
      ],
      "default": "NORMAL",
      "description": " - NORMAL: Indicates that an asset is capable of being split/merged, with each of the\nunits being fungible, even across a key asset ID boundary (assuming the\nkey group is the same).\n - COLLECTIBLE: Indicates that an asset is a collectible, meaning that each of the other\nitems under the same key group are not fully fungible with each other.\nCollectibles also cannot be split or merged."
    }
  }
}
