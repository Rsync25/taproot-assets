syntax = "proto3";

import "taro.proto";

package mintrpc;

option go_package = "github.com/lightninglabs/tarorpc/mintrpc";

service Mint {
    /* tarocli: `assets mint`
    MintAsset will attempts to mint the set of assets (async by default to
    ensure proper batching) specified in the request.
    */
    rpc MintAsset (MintAssetRequest) returns (MintAssetResponse);

    rpc MintingBatches (MintingBatchesRequest) returns (MintingBatchesResponse);

    rpc PrepareExternalAnchor (PrepareExternalAnchorRequest)
        returns (PrepareExternalAnchorResponse);

    rpc PauseAutoBatch (PauseAutoBatchRequest) returns (PauseAutoBatchResponse);
}

message MintAsset {
    // The type of the asset to be created.
    tarorpc.AssetType asset_type = 1;

    // The name, or "tag" of the asset. This will affect the final asset ID.
    string name = 2;

    /*
    An opaque blob that resents metadata related to the asset. This will affect
    the final asset ID.
    */
    bytes meta_data = 3;

    /*
    The total amount of units of the new asset that should be created. If the
    AssetType is Collectible, then this field cannot be set.
    */
    int64 amount = 4;

    /*
    The specific group key this asset should be minted with.
    */
    bytes group_key = 5;
}

message MintAssetRequest {
    // The asset to be minted.
    MintAsset asset = 1;

    /*
    If true, then the asset will be created with a key group, which allows for
    future asset issuance.
    */
    bool enable_emission = 6;

    /*
    If true, then a batch will be created immediately. Otherwise the asset
    creation transaction may be batched with other pending minting requests.
    */
    bool skip_batch = 7;
}

message MintAssetResponse {
    /*
    A public key serialized in compressed format that can be used to uniquely
    identify a pending minting batch. Responses that share the same key will be
    batched into the same minting transaction.
    */
    bytes batch_key = 1;
}

message MintingBatchesRequest {
}

message MintingBatch {
    // The public key of the batch.
    bytes batch_key = 1;

    // The assets that are part of the batch.
    repeated MintAsset assets = 2;

    string state = 3;
}

message MintingBatchesResponse {
    repeated MintingBatch batches = 1;
}

message PrepareExternalAnchorRequest {
    // The public key of the batch.
    bytes batch_key = 1;
}

message PrepareExternalAnchorResponse {
    MintingBatch batch = 1;

    tarorpc.TapLeaf taro_tap_leaf = 2;
}

message PauseAutoBatchRequest {
}

message PauseAutoBatchResponse {
}
