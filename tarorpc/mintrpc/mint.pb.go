// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: mintrpc/mint.proto

package mintrpc

import (
	tarorpc "github.com/lightninglabs/taro/tarorpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MintAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the asset to be created.
	AssetType tarorpc.AssetType `protobuf:"varint,1,opt,name=asset_type,json=assetType,proto3,enum=tarorpc.AssetType" json:"asset_type,omitempty"`
	// The name, or "tag" of the asset. This will affect the final asset ID.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//
	//An opaque blob that resents metadata related to the asset. This will affect
	//the final asset ID.
	MetaData []byte `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	//
	//The total amount of units of the new asset that should be created. If the
	//AssetType is Collectible, then this field cannot be set.
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//
	//The specific group key this asset should be minted with.
	GroupKey []byte `protobuf:"bytes,5,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
}

func (x *MintAsset) Reset() {
	*x = MintAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAsset) ProtoMessage() {}

func (x *MintAsset) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAsset.ProtoReflect.Descriptor instead.
func (*MintAsset) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{0}
}

func (x *MintAsset) GetAssetType() tarorpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return tarorpc.AssetType(0)
}

func (x *MintAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MintAsset) GetMetaData() []byte {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *MintAsset) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintAsset) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

type MintAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset to be minted.
	Asset *MintAsset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	//
	//If true, then the asset will be created with a key group, which allows for
	//future asset issuance.
	EnableEmission bool `protobuf:"varint,6,opt,name=enable_emission,json=enableEmission,proto3" json:"enable_emission,omitempty"`
	//
	//If true, then a batch will be created immediately. Otherwise the asset
	//creation transaction may be batched with other pending minting requests.
	SkipBatch bool `protobuf:"varint,7,opt,name=skip_batch,json=skipBatch,proto3" json:"skip_batch,omitempty"`
}

func (x *MintAssetRequest) Reset() {
	*x = MintAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetRequest) ProtoMessage() {}

func (x *MintAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetRequest.ProtoReflect.Descriptor instead.
func (*MintAssetRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{1}
}

func (x *MintAssetRequest) GetAsset() *MintAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *MintAssetRequest) GetEnableEmission() bool {
	if x != nil {
		return x.EnableEmission
	}
	return false
}

func (x *MintAssetRequest) GetSkipBatch() bool {
	if x != nil {
		return x.SkipBatch
	}
	return false
}

type MintAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//A public key serialized in compressed format that can be used to uniquely
	//identify a pending minting batch. Responses that share the same key will be
	//batched into the same minting transaction.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
}

func (x *MintAssetResponse) Reset() {
	*x = MintAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetResponse) ProtoMessage() {}

func (x *MintAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetResponse.ProtoReflect.Descriptor instead.
func (*MintAssetResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{2}
}

func (x *MintAssetResponse) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

type MintingBatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MintingBatchesRequest) Reset() {
	*x = MintingBatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintingBatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintingBatchesRequest) ProtoMessage() {}

func (x *MintingBatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintingBatchesRequest.ProtoReflect.Descriptor instead.
func (*MintingBatchesRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{3}
}

type MintingBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the batch.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// The assets that are part of the batch.
	Assets []*MintAsset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	State  string       `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *MintingBatch) Reset() {
	*x = MintingBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintingBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintingBatch) ProtoMessage() {}

func (x *MintingBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintingBatch.ProtoReflect.Descriptor instead.
func (*MintingBatch) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{4}
}

func (x *MintingBatch) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *MintingBatch) GetAssets() []*MintAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *MintingBatch) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type MintingBatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batches []*MintingBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *MintingBatchesResponse) Reset() {
	*x = MintingBatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintingBatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintingBatchesResponse) ProtoMessage() {}

func (x *MintingBatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintingBatchesResponse.ProtoReflect.Descriptor instead.
func (*MintingBatchesResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{5}
}

func (x *MintingBatchesResponse) GetBatches() []*MintingBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

type PrepareExternalAnchorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the batch.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
}

func (x *PrepareExternalAnchorRequest) Reset() {
	*x = PrepareExternalAnchorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareExternalAnchorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareExternalAnchorRequest) ProtoMessage() {}

func (x *PrepareExternalAnchorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareExternalAnchorRequest.ProtoReflect.Descriptor instead.
func (*PrepareExternalAnchorRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareExternalAnchorRequest) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

type PrepareExternalAnchorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch       *MintingBatch    `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	TaroTapLeaf *tarorpc.TapLeaf `protobuf:"bytes,2,opt,name=taro_tap_leaf,json=taroTapLeaf,proto3" json:"taro_tap_leaf,omitempty"`
}

func (x *PrepareExternalAnchorResponse) Reset() {
	*x = PrepareExternalAnchorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareExternalAnchorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareExternalAnchorResponse) ProtoMessage() {}

func (x *PrepareExternalAnchorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareExternalAnchorResponse.ProtoReflect.Descriptor instead.
func (*PrepareExternalAnchorResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{7}
}

func (x *PrepareExternalAnchorResponse) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *PrepareExternalAnchorResponse) GetTaroTapLeaf() *tarorpc.TapLeaf {
	if x != nil {
		return x.TaroTapLeaf
	}
	return nil
}

type PauseAutoBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseAutoBatchRequest) Reset() {
	*x = PauseAutoBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseAutoBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseAutoBatchRequest) ProtoMessage() {}

func (x *PauseAutoBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseAutoBatchRequest.ProtoReflect.Descriptor instead.
func (*PauseAutoBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{8}
}

type PauseAutoBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseAutoBatchResponse) Reset() {
	*x = PauseAutoBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseAutoBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseAutoBatchResponse) ProtoMessage() {}

func (x *PauseAutoBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseAutoBatchResponse.ProtoReflect.Descriptor instead.
func (*PauseAutoBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{9}
}

var File_mintrpc_mint_proto protoreflect.FileDescriptor

var file_mintrpc_mint_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x1a, 0x0a, 0x74,
	0x61, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x09, 0x4d, 0x69,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x22, 0x84, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b,
	0x69, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x30, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x4d, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6d, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x49, 0x0a, 0x16, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x1c,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x6f,
	0x5f, 0x74, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x70, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x6f, 0x54, 0x61, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x22, 0x17,
	0x0a, 0x15, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xd8, 0x02, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x4d, 0x69,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x1e, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x69,
	0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x69,
	0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63,
	0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mintrpc_mint_proto_rawDescOnce sync.Once
	file_mintrpc_mint_proto_rawDescData = file_mintrpc_mint_proto_rawDesc
)

func file_mintrpc_mint_proto_rawDescGZIP() []byte {
	file_mintrpc_mint_proto_rawDescOnce.Do(func() {
		file_mintrpc_mint_proto_rawDescData = protoimpl.X.CompressGZIP(file_mintrpc_mint_proto_rawDescData)
	})
	return file_mintrpc_mint_proto_rawDescData
}

var file_mintrpc_mint_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mintrpc_mint_proto_goTypes = []interface{}{
	(*MintAsset)(nil),                     // 0: mintrpc.MintAsset
	(*MintAssetRequest)(nil),              // 1: mintrpc.MintAssetRequest
	(*MintAssetResponse)(nil),             // 2: mintrpc.MintAssetResponse
	(*MintingBatchesRequest)(nil),         // 3: mintrpc.MintingBatchesRequest
	(*MintingBatch)(nil),                  // 4: mintrpc.MintingBatch
	(*MintingBatchesResponse)(nil),        // 5: mintrpc.MintingBatchesResponse
	(*PrepareExternalAnchorRequest)(nil),  // 6: mintrpc.PrepareExternalAnchorRequest
	(*PrepareExternalAnchorResponse)(nil), // 7: mintrpc.PrepareExternalAnchorResponse
	(*PauseAutoBatchRequest)(nil),         // 8: mintrpc.PauseAutoBatchRequest
	(*PauseAutoBatchResponse)(nil),        // 9: mintrpc.PauseAutoBatchResponse
	(tarorpc.AssetType)(0),                // 10: tarorpc.AssetType
	(*tarorpc.TapLeaf)(nil),               // 11: tarorpc.TapLeaf
}
var file_mintrpc_mint_proto_depIdxs = []int32{
	10, // 0: mintrpc.MintAsset.asset_type:type_name -> tarorpc.AssetType
	0,  // 1: mintrpc.MintAssetRequest.asset:type_name -> mintrpc.MintAsset
	0,  // 2: mintrpc.MintingBatch.assets:type_name -> mintrpc.MintAsset
	4,  // 3: mintrpc.MintingBatchesResponse.batches:type_name -> mintrpc.MintingBatch
	4,  // 4: mintrpc.PrepareExternalAnchorResponse.batch:type_name -> mintrpc.MintingBatch
	11, // 5: mintrpc.PrepareExternalAnchorResponse.taro_tap_leaf:type_name -> tarorpc.TapLeaf
	1,  // 6: mintrpc.Mint.MintAsset:input_type -> mintrpc.MintAssetRequest
	3,  // 7: mintrpc.Mint.MintingBatches:input_type -> mintrpc.MintingBatchesRequest
	6,  // 8: mintrpc.Mint.PrepareExternalAnchor:input_type -> mintrpc.PrepareExternalAnchorRequest
	8,  // 9: mintrpc.Mint.PauseAutoBatch:input_type -> mintrpc.PauseAutoBatchRequest
	2,  // 10: mintrpc.Mint.MintAsset:output_type -> mintrpc.MintAssetResponse
	5,  // 11: mintrpc.Mint.MintingBatches:output_type -> mintrpc.MintingBatchesResponse
	7,  // 12: mintrpc.Mint.PrepareExternalAnchor:output_type -> mintrpc.PrepareExternalAnchorResponse
	9,  // 13: mintrpc.Mint.PauseAutoBatch:output_type -> mintrpc.PauseAutoBatchResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_mintrpc_mint_proto_init() }
func file_mintrpc_mint_proto_init() {
	if File_mintrpc_mint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mintrpc_mint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintingBatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintingBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintingBatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareExternalAnchorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareExternalAnchorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseAutoBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseAutoBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mintrpc_mint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mintrpc_mint_proto_goTypes,
		DependencyIndexes: file_mintrpc_mint_proto_depIdxs,
		MessageInfos:      file_mintrpc_mint_proto_msgTypes,
	}.Build()
	File_mintrpc_mint_proto = out.File
	file_mintrpc_mint_proto_rawDesc = nil
	file_mintrpc_mint_proto_goTypes = nil
	file_mintrpc_mint_proto_depIdxs = nil
}
